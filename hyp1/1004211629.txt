in a shared memory multiprocessor system with a separate cache memory for each processor , it is possible to have many copies of shared data : one copy in the main memory and one in the local cache of each processor that requested it cache coherence is the discipline which ensures that the changes in the values of shared operands ( data ) are propagated throughout the system in a timely fashion the following are the requirements for cache coherence : ; write propagation : changes to the data in any cache must be propagated to other copies ( of that cache line ) in the peer caches one type of data occurring simultaneously in different cache memory is called cache coherence , or in some systems , global memory the following conditions are necessary to achieve cache coherence : in a read made by a processor p to a location x that follows a write by the same processor p to x , with no writes to x by another processor occurring between the write and the read instructions made by p , x must always return the value written by p in a read made by a processor p1 to location x that follows a write by another processor p2 to x , with no other writes to x made by any processor occurring between the two accesses and with the read and write being sufficiently separated , x must always return the value written by p2 propagating the writes to the shared memory location ensures that all the caches have a coherent view of the memory to illustrate this better , consider the following example : a multi-processor system consists of four processors - p1 , p2 , p3 and p4 , all containing cached copies of a shared variable s whose initial value is 0 in other words , if location x received two different values a and b , in this order , from any two processors , the processors can never read location x as b and then read it as a the alternative definition of a coherent system is via the definition of sequential consistency memory model : '' the cache coherent system must appear to execute all threads â€™ loads and stores to a single memory location in a total order that respects the program order of each thread '' when replacement of one of the entries is required , the snoop filter selects for the replacement the entry representing the cache line or lines owned by the fewest nodes , as determined from a presence vector in each of the entries write propagation in snoopy protocols can be implemented by either of the following methods : ; write-invalidate : when a write operation is observed to a location that a cache has a copy of , the cache controller invalidates its own copy of the snooped memory location , which forces a read from main memory of the new value on its next access ; write-update : when a write operation is observed to a location that a cache has a copy of , the cache controller updates its own copy of the snooped memory location with the new data 