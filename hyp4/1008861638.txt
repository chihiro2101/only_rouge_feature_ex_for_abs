client-server applications use the tls protocol to communicate across a network in a way designed to prevent eavesdropping and tampering since applications can communicate either with or without tls ( or ssl ) , it is necessary for the client to indicate to the server the setup of a tls connection one of the main ways of achieving this is to use a different port number for tls connections , for example port 443 for https another mechanism is for the client to make a protocol-specific request to the server to switch the connection to tls ; for example , by making a starttls request when using the mail and news protocols the protocols use a handshake with an asymmetric cipher to establish not only cipher settings but also a session-specific shared key with which further communication is encrypted using a symmetric cipher during this handshake , the client and server agree on various parameters used to establish the connection 's security : the handshake begins when a client connects to a tls-enabled server requesting a secure connection and the client presents a list of supported cipher suites ( ciphers and hash functions ) the certificate contains the hostname , the trusted certificate authority ( ca ) that vouches for the authenticity of the certificate , and the server 's public encryption key to generate the session keys used for the secure connection , the client either : encrypts a random number with the server 's public key and sends the result to the server ( which only the server should be able to decrypt with its private key ) ; both parties then use the random number to generate a unique session key for subsequent encryption and decryption of data during the session uses diffieâ€“hellman key exchange to securely generate a random and unique session key for encryption and decryption that has the additional property of forward secrecy : if the server 's private key is disclosed in future , it can not be used to decrypt the current session , even if the session is intercepted and recorded by a third party this concludes the handshake and begins the secured connection , which is encrypted and decrypted with the session key until the connection closes ; length : length of application data ( excluding the protocol header and including the mac and padding trailers ) ; mac : 32 bytes for the sha-256-based hmac , 20 bytes for the sha-1-based hmac , 16 bytes for the md5-based hmac in the name-based virtual server feature being provided by the application layer , all co-hosted virtual servers share the same certificate because the server has to select and send a certificate immediately after the clienthello message this is a big problem in hosting environments because it means either sharing the same certificate among all customers or using a different ip address for each of them normally this is to securely implement http over tls within the main '' http '' uri scheme ( which avoids forking the uri space and reduces the number of used ports ) , however , few implementations currently support this the current approved version of tls is version 1.3 , which is specified in : : '' the transport layer security ( tls ) protocol version 1.3 '' specifies an extension to the imap , pop3 and acap services that allow the server and client to use transport-layer security to provide private , authenticated communication over the internet : '' upgrading to tls within http/1.1 '' , explains how to use the http/1.1 upgrade header to initiate transport layer security ( tls ) over an existing tcp connection : '' pre-shared key ciphersuites for transport layer security ( tls ) '' , adds three sets of new cipher suites for the tls protocol to support authentication based on pre-shared keys : '' summarizing known attacks on transport layer security ( tls ) and datagram tls ( dtls ) '' : '' recommendations for secure use of transport layer security ( tls ) and datagram transport layer security ( dtls ) '' specifications ( see for older ssl 2.0 , ssl 3.0 , tls 1.0 , tls 1.1 links ) the transport layer security ( tls ) protocol version 1.2 ietf ( internet engineering task force ) tls workgroup ; tls version intolerance tls version intolerance tls 1.3 and version intolerance ; other owasp : transport layer protection cheat sheet a talk on ssl/tls that tries to explain things in terms that people might understand 