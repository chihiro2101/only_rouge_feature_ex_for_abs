the observer design pattern is one of the twenty-three well-known design patterns describing how to solve recurring design challenges in order to design flexible and reusable object-oriented software , i.e defining a one-to-many dependency between objects by defining one object ( subject ) that updates the state of dependent objects directly is inflexible because it couples the subject to particular dependent objects still , it can make sense from a performance point of view or if the object implementation is tightly coupled ( think of low-level kernel structures that execute thousands of times a second ) the sole responsibility of a subject is to maintain a list of observers and to notify them of state changes by calling their update ( ) operation the responsibility of observers is to register ( and unregister ) themselves on a subject ( to get notified of state changes ) and to update their state ( synchronize their state with the subject 's state ) when they are notified this type of implementation is considered '' tightly coupled '' , forcing both the observers and the subject to be aware of each other and have access to their internal parts , creating possible issues of scalability , speed , message recovery and maintenance ( also called event or notification loss ) , the lack of flexibility in conditional dispersion , and possible hindrance to desired security measures in some ( non-polling ) implementations of the publish-subscribe pattern ( aka the pub-sub pattern ) , this is solved by creating a dedicated '' message queue '' server ( and sometimes an extra '' message handler '' object ) as an extra stage between the observer and the object being observed , thus decoupling the components comparison between different observer pattern implementations moshe bindler , 2015 ( github ) differences between pub/sub and observer pattern the observer pattern by adi osmani ( safari books online ) in early implementations of multi-window operating systems like os/2 and windows , the terms '' publish-subscribe pattern '' and '' event driven software development '' were used as a synonym for the observer pattern the windows programming experience charles petzold , nov 10 , 1992 , pc magazine ( google books ) the observer pattern , as described in the gof book , is a very basic concept and does not address removing interest in changes to the observed '' subject '' or special logic to be done by the observed '' subject '' before or after notifying the observers when a string is supplied from system.in , the method notifyobservers is then called , in order to notify all observers of the event 's occurrence , in the form of an invocation of their 'update ' methods 