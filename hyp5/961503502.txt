a relational database schema is defined as a tuple s ( d , r , h ) where d is the domain of atomic values ( see relational model for more on the notions of domain and atomic value ) , r is a finite set of relation names , and : h : r → 2 c a function that associates a header with each relation name in r the subset of c for which a tuple t is defined is called the domain of t ( not to be confused with the domain in the schema ) and denoted as dom ( t ) we then define the set of atomic formulas as , type with the following rules : if v and w in v , a in type ( v ) and b in type ( w ) then the formula v.a w.b is in as , type , if v in v , a in type ( v ) and k denotes a value in d then the formula v.a k is in as , type , and if v in v , r in r and type ( v ) h ( r ) then the formula r ( v ) is in as , type we define the set of formulas fs , type inductively with the following rules : every atom in as , type is also in fs , type if f 1 and f 2 are in fs , type then the formula f 1 ∧ f 2 is also in fs , type if f 1 and f 2 are in fs , type then the formula f 1 ∨ f 2 is also in fs , type if f is in fs , type then the formula ¬ f is also in fs , type if v in v , h a header and f a formula in f [ s , type v- > h ] then the formula ∃ v : h ( f ) is also in fs , type , where type v- > h denotes the function that is equal to type except that it maps v to h , if v in v , h a header and f a formula in f [ s , type v- > h ] then the formula ∀ v : h ( f ) is also in fs , type examples of formulas : t.name '' c darwen '' book ( t ) ∨ magazine ( t ) ∀ t : then the corresponding safe formula for v.b is : : v.b 1 ∨ v.b 2 ∨ ∃ w ( r ( w ) ∧ ( v.b w.a ∨ v.b w.b ) ) this formula , then , can be used to rewrite any unsafe query expression to an equivalent safe query expression by adding such a formula for every variable v and column name a in its type where it is used in the expression 