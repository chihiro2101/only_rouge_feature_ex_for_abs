when a student has finished using a room , the student must return to the desk and indicate that one room has become free in the simplest implementation , the clerk at the front desk knows only the number of free rooms available , which they only know correctly if all of the students actually use their room while they 've signed up for them and return them when they 're done in this scenario the front desk count-holder represents a counting semaphore , the rooms are the resource , and the students represent processes/threads when a student requests a room , they are granted access , and the value of the semaphore is changed to 9 if someone requests a room and the current value of the semaphore is 0 , the little book of semaphores allen b downey they are forced to wait until a room is freed ( when the count is increased from 0 ) when used to control access to a pool of resources , a semaphore tracks only how many resources are free ; it does not keep track of which of the resources are free even if all processes follow these rules , multi-resource deadlock may still occur when there are different resources managed by different semaphores and when processes need to use more than one resource at a time , as illustrated by the dining philosophers problem the p operation wastes time or sleeps until a resource protected by the semaphore becomes available , at which time the resource is immediately claimed a simple way to understand ( p ) and ( v ) operations is : : decrements the value of semaphore variable by 1 if the new value of the semaphore variable is negative , the process executing is blocked ( i.e after the increment , if the pre-increment value was negative ( meaning there are processes waiting for a resource ) , it transfers a blocked process from the semaphore 's waiting queue to the ready queue the counting semaphore concept can be extended with the ability to claim or return more than one '' unit '' from the semaphore , a technique implemented in unix , operations which appear indivisible from the perspective of other processes : function v ( semaphore s , integer i ) : s ← s + i function p ( semaphore s , integer i ) : repeat : if s ≥ i : s ← s − i break however , the remainder of this section refers to semaphores with unary v and p operations , unless otherwise specified in the absence of such a hardware instruction , an atomic operation may be synthesized through the use of a mutual exclusion software solutions to solve this problem in a multiprocessor system a locking variable can be used to control access to the semaphore they communicate using a queue of maximum size n and are subject to the following conditions : the consumer must wait for the producer to produce something if the queue is empty ; the producer must wait for the consumer to consume something if the queue is full the semaphore solution to the producer–consumer problem tracks the state of the queue with two semaphores : emptycount , the number of empty places in the queue , and fullcount , the number of elements in the queue dijkstra subsequently wrote that he intended p to stand for prolaag , short for probeer te verlagen , literally '' try to reduce '' , or to parallel the terms used in the other case , '' try to decrease '' while a binary semaphore may be colloquially referred to as a mutex , a true mutex has a more specific use-case and definition , in that only the task that locked the mutex is supposed to unlock it 