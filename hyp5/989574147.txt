state diagrams are used to give an abstract description of the behavior of a system this behavior is analyzed and represented by a series of events that can occur in one or more possible states hereby '' each diagram usually represents objects of a single class and track the different states of its objects through the system '' image : directed.svg 125px thumb a directed graph a classic form of state diagram for a finite automaton ( fa ) is a directed graph with the following elements ( q , σ , z , δ , q 0 , f ) : taylor booth ( 1967 ) sequential machines and automata theory , john wiley and sons , new york this is written mathematically as δ : q × σ → q , so δ ( the transition function ) in the definition of the fa is given by both the pair of vertices connected by an edge and the symbol on an edge in a diagram representing this fa item δ ( q , a ) p in the definition of the fa means that from the state named q under input symbol a , the transition to the state p occurs in this machine in the diagram representing this fa , this is represented by an edge labeled by a pointing from the vertex labeled by q to the vertex labeled by p mcclusky , introduction to the theory of switching circuits , mcgraw-hill , 1965 the start state is not shown and must be inferred from the text accepting state ( s ) f : if used , for example for accepting automata , f ∈ q is the accept state for a deterministic finite automaton ( dfa ) , nondeterministic finite automaton ( nfa ) , generalized nondeterministic finite automaton ( gnfa ) , or moore machine , the input is denoted on each edge for a mealy machine , input and output are signified on each edge , separated with a slash '' / '' : '' 1/0 '' denotes the state change upon encountering the symbol '' 1 '' causing the symbol '' 0 '' to be output for a moore machine the state 's output is usually written inside the state 's circle , also separated from the state 's designator with a slash '' / '' s 1 and s 2 are states and s 1 is an accepting state or a final state classic state diagrams require the creation of distinct nodes for every valid combination of parameters that define the state this can lead to a very large number of nodes and transitions between nodes for all but the simplest of systems ( state and transition explosion ) the current state of each cross-functional state machine in the statechart defines the state of the system since the program counter is the whole state , it follows that executing the command changed the state in the previous case , the program would be in the same state , because the whole state is just the program counter , so if the program counterpoints to the same position ( next command ) it suffices to specify that we are in the same state this results from the state being the program location ( here cycling ) combined with the counter value , which is strictly increasing ( until the overflow ) , so different states are visited in sequence , until the overflow the door state machine shown at the top of this article , for example , is not in a more advanced stage when it is in the '' closed '' state , compared to being in the '' opened '' state ; it simply reacts differently to the open/close events 